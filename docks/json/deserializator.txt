# JMH version: 1.26
# VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=58035:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 6 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: json.deserialization.JsonDeseriallizator.setDeserializationThroughput

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 511520,947 ops/s
# Warmup Iteration   2: 660876,772 ops/s
# Warmup Iteration   3: 661636,870 ops/s
# Warmup Iteration   4: 662137,020 ops/s
# Warmup Iteration   5: 661026,038 ops/s
Iteration   1: 661558,071 ops/s
Iteration   2: 660702,257 ops/s
Iteration   3: 661046,856 ops/s
Iteration   4: 660513,767 ops/s
Iteration   5: 660633,047 ops/s


Result "json.deserialization.JsonDeseriallizator.setDeserializationThroughput":
  660890,800 ±(99.9%) 1626,576 ops/s [Average]
  (min, avg, max) = (660513,767, 660890,800, 661558,071), stdev = 422,417
  CI (99.9%): [659264,223, 662517,376] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 1.8.0_251, Java HotSpot(TM) 64-Bit Server VM, 25.251-b08
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=58035:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 6 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: json.deserialization.JsonDeseriallizator.setDeserializationTime

# Run progress: 50,00% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁵ s/op
# Warmup Iteration   2: ≈ 10⁻⁵ s/op
# Warmup Iteration   3: ≈ 10⁻⁵ s/op
# Warmup Iteration   4: ≈ 10⁻⁵ s/op
# Warmup Iteration   5: ≈ 10⁻⁵ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op


Result "json.deserialization.JsonDeseriallizator.setDeserializationTime":
  ≈ 10⁻⁵ s/op


# Run complete. Total time: 00:03:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
JsonDeseriallizator.setDeserializationThroughput  thrpt    5  660890,800 ± 1626,576  ops/s
JsonDeseriallizator.setDeserializationTime         avgt    5      ≈ 10⁻⁵              s/op

Process finished with exit code 0